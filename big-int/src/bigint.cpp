/**
 * Boost Software License - Version 1.0 - August 17th, 2003
 * Permission is hereby granted, free of charge, to any person
 * or organization obtaining a copy of the software and
 * accompanying documentation covered by this license
 * (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative
 * works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement,
 * including the above license grant, this restriction and the following
 * disclaimer, must be included in all copies of the Software, in whole or
 * in part, and all derivative works of the Software, unless such copies
 * or derivative works are solely in the form of machine-executable
 * object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND
 * NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE
 * DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY,
 * WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#include "bigint.hpp"

namespace libbig
{
largeInt::largeInt()
{
    // initializes object with 0
    this->sign = POSITIVE;
    this->number = "";
}

largeInt::largeInt(int nValue)
{
    // checks if input is negative and initializes object with input
    if (nValue < 0)
    {
        this->sign = NEGATIVE;
        nValue *= -1;
    }
    else
    {
        this->sign = POSITIVE;
    }
    this->number = std::to_string(nValue);
}

largeInt::largeInt(int64_t nValue)
{
    // checks if input is negative and initializes object with input
    if (nValue < 0)
    {
        this->sign = NEGATIVE;
        nValue *= -1;
    }
    else
    {
        this->sign = POSITIVE;
    }
    this->number = std::to_string(nValue);
}

largeInt::largeInt(const std::string& nValue)
{
    // checks if input string starts with a minus and initializes object with input
    if (nValue.front() == '-')
    {
        this->sign = NEGATIVE;
        this->number = std::string(nValue.begin() + 1, nValue.end());
    }
    else
    {
        this->sign = POSITIVE;
        this->number = nValue;
    }
}
} // namespace libbig